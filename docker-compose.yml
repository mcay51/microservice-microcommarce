version: '3.8'
services:
  config-server:
    build:
      context : ./config-server
    image: microcommerce/config-server:latest
    ports:
      - "8888:8888"
    networks:
      - microservice-network

  eureka-server:
    build:
      context : ./eureka-server
    image: microcommerce/eureka-server:latest
    ports:
      - "8761:8761"
    networks:
      - microservice-network
    depends_on:
      - config-server

  apigateway-server:
    build:
      context : ./apigateway-server
    image: microcommerce/apigateway-server:latest
    ports:
      - "8080:8080"
    networks:
      - microservice-network
    depends_on:
      - config-server
      - eureka-server


  product-service:
    build:
      context : ./product-service
    image: microcommerce/product-service:latest
    ports:
      - "8081:8081"
    networks:
      - microservice-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/orderdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - config-server
      - eureka-server
      - apigateway-server
      - postgres

  order-service:
    build:
      context : ./order-service
    image: microcommerce/order-service:latest
    ports:
      - "8082:8082"
    networks:
      - microservice-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/orderdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - config-server
      - eureka-server
      - apigateway-server
      - postgres

  stock-service:
    build:
      context : ./stock-service
    image: microcommerce/stock-service:latest
    ports:
      - "8083:8083"
    networks:
      - microservice-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/orderdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - config-server
      - eureka-server
      - apigateway-server
      - postgres

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - microservice-network
    depends_on:
      - apigateway-server
      - product-service
      - order-service
      - stock-service

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

networks:
  microservice-network:
    driver: bridge
